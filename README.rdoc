= DDEX

{<img src="https://secure.travis-ci.org/sshaw/ddex.svg"/>}[http://travis-ci.org/sshaw/ddex]

{DDEX}[http://ddex.net] metadata serialization for Ruby

=== Overview

 require "ddex"

 message = DDEX.read("path/to/metadata.xml")  # ERN
 puts message.update_indicator
 message.resource_list.sound_recordings.each do |sr|
   title = sr.reference_title.title_text
   puts title.value
   puts title.language_and_script_code
   puts sr.remastered?
 end

 puts "Supported!" if DDEX.supports?("ern/341")

 message = DDEX.read(string)
 message = DDEX.read(io)
 p message.to_hash

 include DDEX::ERN::V341   # v3.4.1
 message = NewReleaseMessage.new(:resource_list => ResourceList.new)
 record  = SoundRecording.new(:language_and_script_code => "en-US")
 # ...
 message.resource_list.sound_recordings = [record]

 xml = DDEX.write(message)
 File.open("bloat.xml", "w") { |io| io.puts(xml) }

=== Installation

Rubygems:

  gem install ddex

Bundler:

  gem "ddex"

=== Supported Versions

Currently just ERN 3.3 - 3.7, DSR soon!

=== How This Differs From the Spec

Every DDEX version handled by this module is fully supported, but there are some things you'll need to know.

==== Naming Conventions

DDEX elements and attributes use the {CamelCase naming convention}[https://en.wikipedia.org/wiki/CamelCase], this module uses Ruby naming conversions:
CamelCase for classes, and {snake_case}[https://en.wikipedia.org/wiki/Snake_case] for class attributes. For example, this DDEX XML:

  <PartyName>
    <FullName>sshaw</FullName>
  </PartyName>

Would be manipulated via:

  party = PartyName.new(:full_name => "sshaw")
  puts party.full_name
  party.full_name = "gwozdzie"


See also {Boolean elements and attributes}[rdoc-ref:README@Boolean+Elements+and+Attributes]

==== Cardinally

Elements that _can_ occur more than once will be placed in an <code>Array</code> and their parent classes' accessor methods will use the plural form of
the element/attribute's name. For example:

  <Release>
    <!-- More data -->
    <PLine>
      <Year>1994</Year>
      <PLineText>Track Copyright</PLineText>
    </PLine>
    <PLine>
      <Year>2001</Year>
      <PLineText>Another Track Copyright</PLineText>
    </PLine>
  </Release>

Would be manipulated via:

  release.p_lines.each { |line| puts line.p_line_text }
  release.p_lines << PLine.new(:year => 1999)

==== Boolean Elements and Attributes

The following are applied to accessors derived from DDEX elements and attributes with an XML schema type of +boolean+:

* <code>"Is"</code> is removed from the beginning of the name
* The *reader* *method* is turned into a predicate accessor, i.e., has a <code>"?"</code> appended to it

For example, <code>SoundRecording/IsArtistRelated</code>:

  recording = SoundRecording.new(:artist_related => true)
  p recording.artist_related?  # true
  recording.artist_related = false

==== Version Specific Changes

These changes only affect the object model, the resulting XML will conform to the appropriate DDEX schema.

===== ERN >= v3.6

<code>PriceInformation/@PriceType</code> has been renamed to <code>PriceInformation#type</code> to avoid conflicting with the
element of the same name (<code>PriceInformation/PriceType</code>).

=== Specification Version Detection

The specification version is determined by the <code>MessageSchemaVersionId</code>, which can be:

1. Detected based on the root element's value i.e., <code>/node()/@MessageSchemaVersionId</code> (the root element varies by specification)
2. Explicitly given to DDEX.read via the <code>:version</code> option

By default the <code>MessageSchemaVersionId</code> is assumed to be in <code>SPEC/VERSION</code> format (any leading, trailing, or duplicate slashes will be stripped),
as this seems to be the convention used by most instance docs -though the DDEX specifications
{are not strict about this}[http://www.ddex.net/content/format-messageschemaversionid]. If you're dealing with <code>MessageSchemaVersionId</code>s
that vary from this format, and explicitly setting the version is not practical, you can set the global default(s):

  DDEX::ERN.config["V35"][:message_schema_version_id] = "ern tray_fever!"
  DDEX::ERN.config["V351"][:message_schema_version_id] = "ern/35-punto-1"
  # ...

Note that the version key must match the version's module name.

Feel free to {open an issue}[https://github.com/sshaw/ddex/issues] if you feel this arrangement is problematic or should
be modified to accommodate something more than <code>SPEC/VERSION</code> out of the box.

=== Validation

Not yet!

=== DDEX Parsing Service (Rack Endpoint)

If you want to parse DDEX metadata but don't want to use Ruby to process the results you can setup a parsing service
using <code>Rack::DDEX</code>. <code>Rack::DDEX</code> is a {Rack endpoint}[http://rack.github.io] that parses a DDEX file
and returns JSON.

For example, from the repository's root:

  ~/code/ruby/ddex >cat etc/config.ru
  require "rack/ddex"

  run Rack::DDEX.new

  ~/code/ruby/ddex >rackup -I lib etc/config.ru  # Note that -D has problems with autoloading
  [2014-12-15 20:35:40] INFO  WEBrick 1.3.1
  [2014-12-15 20:35:40] INFO  ruby 2.1.2 (2014-05-08) [x86_64-darwin13.0]
  [2014-12-15 20:35:40] INFO  WEBrick::HTTPServer#start: pid=76385 port=9292

Then, from another terminal

  ~/code/ruby/ddex >curl -d @spec/fixtures/ern/36/instance1.xml http://localhost:9292
  {"message_header":{"message_thread_id":"Bu._UcZLsNbTVitjYnci","message_id":"DbVn-iuUB-SiHl05B2IqW3_","message_file_name":"wz9RHX_Eu1d"
  ...

  ~/code/ruby/ddex >curl http://localhost:9292  # HTTP 400
  {"error":"XML parsing error: Start tag expected, '<' not found"}

=== Contributing

Most all of the code is generated automatically by {jaxb2ruby}[https://github.com/sshaw/jaxb2ruby].
This project's Rakefile contains several tasks that use +jaxb2ruby+ to facaliate code generation.

Once you've generated your code you'll need to integrate it into the main +DDEX+ module.

You also need to write tests, which means you'll have to create XML test fixtures for the given spec and/or version you're adding.
DDEX is bloated -<i>very bloated</i>, so this repository provides you with a way to generate XML fixtures too.

==== Code Generation

Install {jaxb2ruby}[https://github.com/sshaw/jaxb2ruby]. This requires {JRuby}[http://jruby.org].

To generate the Ruby code to process a spec/version you need {a DDEX schema}[http://ddex.net/xml] ({this page}[http://ddex.net/node/70] may be easier to digest).
Add the schema to the proper location in {this repository's +etc/schemas+ directory}[https://github.com/sshaw/ddex/tree/master/etc/schemas],
in most cases it is *not* necessary to add any <code>import</code>ed schemas.

Generated code must be mapped to a Ruby namespace. See {+etc/namespaces.yml+}[https://github.com/sshaw/ddex/blob/master/etc/namespaces.yml] for examples of this.
Please make sure the namespace mapping follows the conventions used by the other supported specs.

Once you've mapped the namespace you can generate the code from the schema. To do this you must make sure +rake+ is running under JRuby.
All of this is done from the repository's root directory.

To generate the code:

  rake generate SCHEMA=./etc/schemas/xxx/schema.xsd

Note that this may result in circular dependencies, which cause problems for Ruby. You likely wont know about these until you
execute the code and receive an error like this:

  uninitialized constant DDEX::ERN::v33::Deal (NameError)

To resolve this you must remove the line that requires +Deal+ and replace it with a {forward declaration}[https://en.wikipedia.org/wiki/Forward_declaration]
of +Deal+. See {this}[https://github.com/sshaw/ddex/blob/v0.0.1/lib/ddex/ern/v33/related_release_offer_set.rb#L14] for an example.

The next step is to create top-level module for the spec and version being added:

  rake generate:main[ern,3.6] > lib/ddex/ern/v36.rb

Where +ern+ is the spec and +3.6+ is the ERN version you want to incorporate.


==== Adding Code to the Main Module

If you're adding a version to an existing spec this is not necessary. Otherwise, once code is generated for a spec it must be accessible
via the main DDEX module. {Take a look at the file}[https://github.com/sshaw/ddex/tree/v0.0.1/lib/ddex.rb] to see how this is done for other specs.

==== Testing

Testing requires generating XML instance documents for the spec/version you're adding. This can be tedious.
It is recommended that you let {Oxygen XML Editor}[http://www.oxygenxml.com/download.html] do this for you. While it is not free
they do allow a 30 day trial. This should give you enough time to generate the necessary files.

Note that I have tried generating XMLs from schemas using Visual Studio and Eclipse and they are not as good as Oxygen as
they generate instance documents that have many validation errors. Oxygen has this problem too but, IIRC, it's limited to +ID+ and +IDREF+
schema types.

Oxygen schema generation should be done by creating a configuration file suitable for the spec/version you're adding.
This repository contains one for every spec/version that's supported, they can be found {here}[https://github.com/sshaw/ddex/tree/v0.0.1/etc/oxygen/samples].
Please add yours.

All fixtures must be tested against the {shared example for metadata serialization}[https://github.com/sshaw/ddex/tree/v0.0.1/spec/ern/versions_spec.rb#L4].
This is in addition to any spec/version specific tests. See the existing ERN specs for examples of this.

=== More Info

* {Source code}[https://github.com/sshaw/ddex]
* {Bugs}[https://github.com/sshaw/ddex/issues]
* {jaxb2ruby}[https://github.com/sshaw/jaxb2ruby] (Generate Ruby objects from an XML schema)
* {DDEX Schemas}[http://ddex.net/xml]

=== TODO/Known Problems

* <code>ROXML.from_xml</code> does not check the root element's name. Need to add something like:

    raise "unknown element #{xml.name}" unless xml.name == tag_name

* When an ROXML accessor expects an ROXML class, and one is not provided, <code>to_xml</code> will result in a <code>NoMethodError</code>:

    # in SomeClass
    xml_accessor :x, :as => AnotherClass

    # Then
    x = SomeClass.new(:x => "123")
    x.to_xml  # undefined method `to_xml' for "123":String

  Raised here: https://github.com/Empact/roxml/blob/v2.5.1/lib/roxml/xml/references.rb#L262

=== Author

Skye Shaw  [skye.shaw {AT} gmail.com]

=== License

Copyright (c) 2013 Skye Shaw. Released under the {MIT License}[www.opensource.org/licenses/MIT].
